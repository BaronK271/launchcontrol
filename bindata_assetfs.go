// Code generated by go-bindata.
// sources:
// html/css/launchcontrol.css
// html/css/ui/launch.css
// html/img/fleshlight.png
// html/img/ruler.png
// html/index.html
// html/js/launchcontrol.js
// html/js/ui/launch.js
// DO NOT EDIT!

package main

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _htmlCssLaunchcontrolCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\x28\xc9\xcd\xd1\x49\xca\x4f\xa9\x54\xa8\xe6\x52\x50\xc8\x48\xcd\x4c\xcf\x28\xb1\x32\x34\x30\x50\xb5\xe6\xaa\xe5\xe2\xd2\x4b\x2b\xcd\xc9\x29\x4e\x2e\x4a\x4d\xcd\x43\x96\x57\xb0\x44\x96\x87\x08\xa2\xc8\xc3\x0c\x00\x04\x00\x00\xff\xff\x9a\xe6\x75\x57\x5e\x00\x00\x00")

func htmlCssLaunchcontrolCssBytes() ([]byte, error) {
	return bindataRead(
		_htmlCssLaunchcontrolCss,
		"html/css/launchcontrol.css",
	)
}

func htmlCssLaunchcontrolCss() (*asset, error) {
	bytes, err := htmlCssLaunchcontrolCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/css/launchcontrol.css", size: 94, mode: os.FileMode(420), modTime: time.Unix(1493925014, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlCssUiLaunchCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\xc1\x4e\xc4\x20\x10\x86\xcf\xe5\x29\xb8\x78\x9c\x4d\x3d\x6d\xd2\x3e\x0d\x2d\x53\x3a\x71\x60\x1a\x98\xee\x6e\xd6\xf8\xee\x06\xe3\xaa\xa9\x18\x8f\x84\x2f\x1f\xfc\x9f\xa7\xcb\x69\x86\x85\xb1\xac\x4c\x61\x55\xfb\x6a\xba\x4d\x0a\x29\x49\x1a\x6c\x46\x76\x4a\x17\x1c\x4d\xb7\x62\xbd\x1e\xec\x73\xdf\x3f\x8d\xa6\xbb\x92\xd7\xf5\xeb\xc4\x94\x10\x1e\x44\x3f\x9a\x37\x63\x7e\x89\x29\x86\x2a\x8f\xee\x06\x07\x17\x45\x17\x10\x32\x26\x8f\x99\x52\x18\x2c\x44\xb9\xc3\x9c\xa9\x6c\x80\x3e\x60\x69\x32\xf2\x2f\x71\xc5\xe9\x85\x14\x64\x53\x8a\x74\x47\x98\x25\x69\x76\x45\x5b\xf0\x46\xb7\xba\x15\x7d\xfb\xf3\x27\x39\x34\x9a\x44\x55\xe2\xc7\xd8\x47\x0b\xb7\xab\xfc\x08\x75\x3e\xd7\x6d\xdf\x2d\xdd\x54\x84\x77\xc5\x3f\x1f\xc8\x3b\x63\xae\xee\xb6\xef\x33\xd6\xc2\xe2\x74\xb0\x8c\x8b\x56\xd3\x7b\x00\x00\x00\xff\xff\x60\xde\x55\xd2\xc0\x01\x00\x00")

func htmlCssUiLaunchCssBytes() ([]byte, error) {
	return bindataRead(
		_htmlCssUiLaunchCss,
		"html/css/ui/launch.css",
	)
}

func htmlCssUiLaunchCss() (*asset, error) {
	bytes, err := htmlCssUiLaunchCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/css/ui/launch.css", size: 448, mode: os.FileMode(420), modTime: time.Unix(1493925735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlImgFleshlightPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x00\xe1\x03\x1e\xfc\x89\x50\x4e\x47\x0d\x0a\x1a\x0a\x00\x00\x00\x0d\x49\x48\x44\x52\x00\x00\x00\x34\x00\x00\x00\x67\x08\x06\x00\x00\x00\x4f\x62\x61\xb2\x00\x00\x00\x06\x62\x4b\x47\x44\x00\xff\x00\xff\x00\xff\xa0\xbd\xa7\x93\x00\x00\x00\x09\x70\x48\x59\x73\x00\x00\x0b\x13\x00\x00\x0b\x13\x01\x00\x9a\x9c\x18\x00\x00\x00\x07\x74\x49\x4d\x45\x07\xe1\x04\x1e\x0b\x27\x13\x06\xa4\xf8\xb1\x00\x00\x00\x19\x74\x45\x58\x74\x43\x6f\x6d\x6d\x65\x6e\x74\x00\x43\x72\x65\x61\x74\x65\x64\x20\x77\x69\x74\x68\x20\x47\x49\x4d\x50\x57\x81\x0e\x17\x00\x00\x03\x49\x49\x44\x41\x54\x78\xda\xed\x9c\xbf\x6f\x9b\x40\x14\xc7\xdf\x21\xd4\xa1\x69\x37\x4b\x8e\x9d\xad\x92\xd9\xba\xf0\x0f\x74\xef\x9a\x01\xa6\x4a\x99\xfb\x07\xf4\x6f\xe8\x1f\xd0\xd9\x52\x26\x3c\x78\xcd\x9e\xd5\xc3\x49\x56\x37\x23\x75\x4b\x5c\x4b\x59\x50\xd5\x25\xb2\x79\x1d\xec\x4b\x00\xf3\xe3\x38\xb8\x03\xbb\xef\x3b\x85\x18\xdf\xbd\x0f\xef\x17\x77\x90\x30\x68\x26\x04\x3d\x62\xc6\xbf\x28\x60\x7c\xdf\x07\x00\x80\xd5\x6a\x95\xfa\x70\xb3\xfe\x5d\xfa\xe5\xcb\xf1\x28\x75\x3c\x99\x4c\x00\x00\x20\x08\x82\x46\xb6\xd9\xaa\x30\x02\xa4\x6d\x89\x71\x83\x20\x40\x15\x28\x0b\xce\x4c\x04\xd4\xac\x82\xe0\x79\x01\xb1\x9c\x94\x40\xc4\xd3\x04\x42\x44\x23\x1e\xb2\x8d\x79\x87\xe9\xf7\x8e\x51\x20\x59\xc8\xae\x3a\x32\x1a\x4b\x3b\x53\x1e\xca\x36\xd6\xb2\x3b\x05\x44\x3c\xf2\xc6\x70\x74\x99\x3a\x76\x1c\x27\x75\x9c\xb8\x63\xa0\x3e\x74\x92\xb9\xd2\x3a\x90\x6a\x48\xe8\x1e\x5b\x05\x08\x7d\xdf\x07\xdf\xf7\x6b\x4f\x5c\xe4\x29\xcb\xb2\x52\x30\x62\x7c\x95\xe2\xa3\xb5\x6c\x3f\xac\x1f\x73\x7f\x7f\x35\x1a\xa7\x8e\xe3\x38\xee\x47\xd9\x4e\x56\xba\x6c\x95\xe3\x9c\x1f\x19\x9e\x04\x75\x5d\xb7\xb0\xca\x35\x59\x13\x29\xe7\x50\xd9\x7a\xa8\x0c\x46\x78\x88\x73\x0e\xbb\xdd\xae\xf6\xd8\xc6\xab\x1c\xe7\xfc\xe8\xea\xe7\xc9\x75\x5d\x58\x2e\x97\x60\xdb\x36\xd8\x76\x7b\x91\x6f\x75\x01\x93\x84\x5a\x2c\x16\xb4\xc0\x23\x20\x6a\xac\x2d\xc3\x34\x69\xac\x67\x17\x72\x2a\xf5\x92\x1d\xf6\xcc\x40\xc7\xde\x5c\xc6\xf3\xfd\x68\xac\x6d\x40\x51\x95\x23\x20\xea\x43\xd4\x87\xa8\x0f\x51\x1f\xa2\x3e\x44\x65\x9b\x80\xa8\x0f\x51\x1f\xa2\x3e\x44\x7d\x88\xaa\x1c\x01\x11\x10\x35\x56\x6a\xac\xd4\x58\xa9\xb1\x9e\x76\x63\xcd\x3e\x5f\xad\xab\xed\x76\xdb\x78\x8c\xc6\x45\x21\x4f\xae\xeb\x02\xe7\x5c\x7a\xa0\xb2\x27\x7e\x54\x14\x14\x93\x0e\x3d\xcf\x4b\xbd\x40\x91\x17\x2a\xc2\x4b\x65\x8f\xf5\x85\x47\xb3\x72\x1c\x27\xf5\x1e\xdd\x6c\x36\xab\x65\xa7\xa5\x23\x77\x64\x9f\x82\xeb\xc8\x47\x6d\x6f\x92\x5c\x8d\xc6\xd2\x6f\x92\x74\xdd\x87\xa4\xaf\xa4\xaa\xe1\x61\x18\xbe\xbc\x69\xaf\xb3\x28\xa0\xe7\x79\xe6\x92\xfb\x90\xa7\x87\x39\x51\x6b\x0e\x55\x79\xa7\xea\xef\x1e\x64\xce\x51\xcd\xa5\xff\x76\xf9\x60\x34\xdc\xb2\x12\x61\x17\xfc\xfc\xf6\xe1\xac\x3c\xe4\x7f\xfc\xfe\xcb\x38\x90\x4c\xfe\xa8\x9c\x4b\x39\x44\x40\x04\x44\x40\xdd\x03\xa9\x54\xad\xb6\x2b\x1d\x79\x88\x80\x08\xc8\x30\x50\x18\x86\xad\x27\x77\xd1\x77\x8b\xe6\x22\x0f\x11\xd0\x09\x01\x61\xd7\x8b\xbb\xec\x22\xaf\x6a\x7f\xa1\x6c\xd7\x07\xc5\xae\xcd\x61\xb3\x0f\xba\x02\x13\xf3\x0b\x7b\x1e\xd6\x8f\x85\xff\x9a\x80\xc9\x00\x09\x15\xed\xb3\x25\x27\x53\x55\x9d\xb1\x0f\xe7\xd6\x06\x12\x2e\x96\x32\xb6\xcc\x20\x19\xd5\x9c\xa3\xd0\x6e\x29\x0f\x89\x81\x74\xee\x78\xca\x80\x64\xec\x61\x75\x73\xe8\xe8\xea\xf5\x25\xe4\xca\x44\x21\xd7\xf7\x90\xab\xe5\xa1\xae\x43\x4e\xc6\x43\x55\x39\xc4\x70\x3a\x47\x76\x73\x5d\x69\xb4\xce\x90\x8b\xa2\x08\xe2\x38\x06\x9c\xce\x81\xdd\x5c\x33\xd5\xc6\xba\xbf\x93\x18\x0e\x00\xef\xee\x01\x36\x4f\x20\xc0\x84\xde\xbd\xbd\x68\xcd\x43\x51\x14\x15\x7e\xf6\xe7\xc7\xed\xfe\x87\xe1\x40\xdc\xdd\xc4\xaa\x40\xaf\x5f\x1c\x0e\x00\xa7\xf3\xc2\x13\xdf\x7f\xfd\xd2\x08\xe8\xc5\xe8\x3c\xed\x41\x8e\x6d\x52\x00\xba\x28\x19\x18\x60\xf3\x24\x67\x90\x8a\xb2\x73\xbd\xea\x0d\x00\x3c\xab\x02\xfd\xad\x3d\x69\x02\xb2\xa1\xe1\x45\x7a\x6e\xe2\xa1\x36\xaf\xac\x11\x49\x3d\x2e\xc7\xbb\x7b\x84\x1e\x88\x7d\xfe\x54\x69\x2f\xad\x58\xfb\x2e\xe9\x37\x34\xba\x0e\x3b\x99\x70\xab\x05\xd4\x15\x98\x2c\x88\x32\x90\x49\xa8\xba\x30\xca\x40\xba\xc1\x54\x40\x5a\x01\x6a\x1b\xac\x09\x88\xd0\x3f\x18\xe2\xaf\x20\xa8\xa4\xb5\x9b\x00\x00\x00\x00\x49\x45\x4e\x44\xae\x42\x60\x82\x01\x00\x00\xff\xff\xda\x49\xb9\x67\xe1\x03\x00\x00")

func htmlImgFleshlightPngBytes() ([]byte, error) {
	return bindataRead(
		_htmlImgFleshlightPng,
		"html/img/fleshlight.png",
	)
}

func htmlImgFleshlightPng() (*asset, error) {
	bytes, err := htmlImgFleshlightPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/img/fleshlight.png", size: 993, mode: os.FileMode(420), modTime: time.Unix(1493895348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlImgRulerPng = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xea\x0c\xf0\x73\xe7\xe5\x92\xe2\x62\x60\x60\xe0\xf5\xf4\x70\x09\x62\x60\x60\x60\x65\x60\x60\x68\xe5\x60\x63\x60\x60\x98\x7c\xdf\xc8\x96\x81\x81\x81\x2d\xc9\xdb\xdd\x85\xe1\x3f\x08\x2e\xd8\xbb\x7c\x32\x03\x03\x03\x67\x81\x47\x64\x31\x03\x03\xb7\x30\x08\x33\x32\xcc\x9a\x23\xc1\xc0\xc0\xc0\x5e\xe2\xe9\xeb\xca\xfe\x90\x45\x8e\x4b\x8e\xa1\x37\x26\xee\x11\x03\x03\x83\x64\x89\x6b\x44\x89\x73\x7e\x6e\x6e\x6a\x5e\x09\x83\x73\x51\x6a\x62\x49\x6a\x8a\x42\x79\x66\x49\x86\x82\xbb\xa7\x6f\x40\x78\x23\x9f\x38\x03\x03\x83\x9d\xa7\x8b\x63\x88\xc7\xf1\xe4\x94\x84\x84\x1f\xe7\x1b\x58\x13\x38\x8c\x12\x83\x8f\xb6\x78\x7f\xe5\xb8\x70\xae\x63\xd9\xa4\x42\x93\x17\x27\x78\xad\x8c\x72\xe5\x45\x65\x44\x65\x8c\x9a\x16\x67\xd6\x85\x14\x98\x9c\xed\x0f\x9b\xb8\x78\x6d\x37\x63\x66\x2c\x03\xc3\x1e\x01\xdd\xb5\x0c\x0e\x11\x31\x0c\x0c\x0c\x0c\x9e\xae\x7e\x2e\xeb\x9c\x12\x9a\x00\x01\x00\x00\xff\xff\x9e\x62\x26\xd0\xd6\x00\x00\x00")

func htmlImgRulerPngBytes() ([]byte, error) {
	return bindataRead(
		_htmlImgRulerPng,
		"html/img/ruler.png",
	)
}

func htmlImgRulerPng() (*asset, error) {
	bytes, err := htmlImgRulerPngBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/img/ruler.png", size: 214, mode: os.FileMode(420), modTime: time.Unix(1493895348, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x57\x5b\x53\xe3\x36\x14\x7e\xdf\x5f\xa1\xd5\x23\xad\xa3\x0d\xa1\x0d\xbb\xb5\x33\xc3\x86\x2d\x84\xbd\x70\x0f\xd0\x37\xd9\x3e\xb6\x65\x64\xc9\xe8\x92\xc4\xfd\xf5\x1d\xd9\x0e\xb9\x52\x60\x67\xda\xe1\x05\x74\xe4\xf3\x7d\xe7\x22\xfb\xe8\x8b\xff\xfe\xf0\x74\x78\x75\x77\xf6\x05\x65\xa6\xe0\x83\x77\xbe\xfb\x87\x38\x15\x69\x80\x41\xe0\xc1\x3b\x84\xfc\x0c\x68\xec\x16\x08\xf9\x05\x18\x8a\xa2\x8c\x2a\x0d\x26\xc0\xd6\x24\xde\x3e\x5e\x7e\x94\x19\x53\x7a\xf0\x60\xd9\x24\xc0\xb7\xde\xf5\x81\x37\x94\x45\x49\x0d\x0b\x39\x60\x14\x49\x61\x40\x98\x00\x8f\xbe\x04\x10\xa7\xb0\x82\x14\xb4\x80\x00\x4f\x18\x4c\x4b\xa9\xcc\x92\xf3\x94\xc5\x26\x0b\x62\x98\xb0\x08\xbc\xda\xf8\x15\x31\xc1\x0c\xa3\xdc\xd3\x11\xe5\x10\x74\xe7\x44\xef\x3d\x0f\x5d\x65\x80\x68\x28\x27\x80\x7a\xa8\x26\x36\x34\xd5\x68\xa7\xb0\xda\xec\xa0\x48\x16\x80\x12\xa6\xb4\x41\x4c\x20\x93\x01\x72\xb5\xfd\x81\xa8\xa8\x90\x34\x19\xa8\xda\x9e\xc7\x46\x0e\xd4\x60\x76\x68\x62\x40\xed\x38\x88\x86\x86\xd2\xf3\xda\xa8\x86\x19\x0e\x83\x6f\xd4\x8a\x28\x73\x48\x25\xb9\x4f\x9a\xcd\x77\x8b\xbc\xf2\x73\x0b\xaa\x42\xd7\xa3\x05\x90\x33\x71\x8f\x14\xf0\x00\x6b\x53\x71\xd0\x19\x80\xc1\x28\x53\x90\x04\xd8\x35\xf2\x13\x21\x34\xa7\xb3\x4e\x2a\x65\xca\x81\x96\x4c\x77\x22\x59\xd4\x7b\x84\xb3\x50\x93\xfc\xc1\x71\x5a\x46\xba\x9d\xfd\xce\x47\x62\x32\x28\x40\x93\x90\x6a\x68\x1f\x79\x96\x75\x22\xad\x31\x32\x55\x09\x01\x36\x30\x33\xa4\xb6\x0b\x88\x19\x0d\x30\xe5\x1c\x23\xb2\xd4\xbd\xcf\x52\x1a\x6d\x14\x2d\x5f\x9e\xa5\xfe\x44\x48\x41\x67\x51\x2c\x3a\xe1\x1c\xed\x0c\x97\xea\xe3\x06\xe9\x75\x7a\x9d\xbe\x8b\xbd\xd8\xeb\x14\x4c\x34\xd9\x31\x61\x20\x55\xcc\x54\x01\xd6\x19\xed\xed\xef\x79\x9f\xc7\x77\x8c\x5d\x8e\xfe\x84\xaf\xdd\xf8\xa8\x38\xb9\x38\xb8\xaf\x22\x7b\x7c\x70\x7c\x91\xf6\x76\x4f\x8b\xeb\x68\x3a\xed\x4b\xd1\xbb\xb8\x8b\xd3\xbd\x31\xfd\xe5\xac\xb8\xbc\xd2\x7f\x93\xaf\xbf\xef\x4f\xc2\xf8\x4b\x9e\xed\x59\x8c\x22\x25\xb5\x96\x8a\xa5\x4c\x04\x98\x0a\x29\xaa\x42\x5a\x8d\xff\xeb\xa2\xbc\xfa\x10\xfe\xad\x34\x75\x5c\xc9\x1f\x5d\x76\xa1\xc7\xb7\xe3\x3d\x71\xf8\xe1\xc4\x1a\x2e\x8e\xa8\xe6\xc3\x13\x3b\xec\xdb\x69\x1e\xdb\x9b\x8f\x97\x63\xf5\x6d\x72\x71\x27\xe5\x59\xb9\x1b\xde\xdc\xa5\x45\x7a\x72\x3e\xba\x9d\x72\x72\x59\x3e\x57\x9a\x3b\xc6\xe6\x65\x7c\xee\x0c\xd7\x5f\x8a\xa6\x7c\x57\x8e\x65\x84\xd7\x14\x75\x11\x1b\xc4\xed\x5b\xfe\xf3\xfc\x7c\x99\xe6\x31\x86\x4f\x9a\x49\xe3\x96\xa1\x8c\xab\x96\x3c\x66\x13\x14\x71\xaa\x75\x80\x1d\x82\x32\x01\xca\x4b\xb8\x65\x31\x4a\x2c\xe7\x3a\x52\xd0\x4e\x2a\x37\xab\xba\xeb\x5f\x62\xd6\xdd\xe4\x51\x72\x5a\x63\x33\x60\x69\x66\x5a\xec\x7a\x28\xee\x15\xb1\xb7\xb7\xcd\x6f\xd5\xb3\xa4\x02\x38\xaa\xff\x7a\x31\x24\xd4\x72\xb3\x1d\xb4\x05\xe6\xb9\x8a\x99\x48\x57\xbc\x56\xfd\x42\x23\xbc\x54\x49\x5b\x62\xa4\x24\x87\x00\xb7\x06\x55\x8c\x7a\x9c\x86\xae\xeb\x6d\xb1\x7a\x8d\xc6\xf5\xd1\x1a\x23\x45\x7b\x14\x8d\x81\x97\x98\x91\x63\x9f\x27\x1d\x33\x4d\x43\x0e\x31\x1e\xf8\xba\xa4\x62\xee\x96\xf2\xaa\xcc\x58\x24\x05\x7a\x5c\x79\x21\x8d\xee\xa7\x54\xc5\x6d\x1a\x19\x8b\x63\x10\x01\x36\xca\x02\x1e\xf8\xc4\xc1\x07\x3e\x69\xe2\xfd\x5f\x39\x95\x9c\x56\x6f\x2a\x1f\x6a\x35\xbc\xa5\x84\xb4\x91\xe5\x5b\xca\x27\x91\xea\xad\xbd\x43\xb2\x04\xe1\x25\x8c\xff\xc4\xb9\xf9\x24\x66\x93\x95\x8f\x7d\x63\x63\xe3\xeb\x77\x53\x6e\x73\x88\xad\xf8\xb3\x38\xc0\x89\x1b\xa9\xbc\x9e\x26\x73\xfc\xf2\x80\x79\x2e\xf2\x8a\xb9\x64\xb4\xcb\x0d\x8d\xb2\x98\xeb\x3a\x52\xac\x34\x48\xab\x68\x71\x2d\xbe\x44\x92\x90\x5e\x67\xb7\xd3\x6d\x8d\xfa\x32\xcc\x57\x45\x48\x4e\x27\xb4\x21\xaf\xbb\x5a\xaf\x9e\x88\xf9\x1a\x15\xd4\x5d\x44\x75\xd2\xe7\x75\x81\x9f\xd0\x3f\xdb\x7a\xf0\x52\x69\x90\xaf\xcb\x9d\x7c\xab\x24\xb8\x8a\x7e\x1b\x9d\xb3\xf0\xc3\x6e\xff\x61\x52\xe5\x97\xdf\x93\xe3\xfc\xf4\x3b\xfd\x76\x9f\xd8\x9b\xf1\xec\xaf\xd9\xf5\x99\x18\x9e\x1c\xf4\xf9\x6e\x31\xbc\xf9\x31\x2a\x8f\x3e\x16\x47\xc3\xc3\xfd\xe9\xd1\x8f\x51\x74\x76\xd8\xbf\x9a\xd1\xa7\x25\xc1\x96\x12\xd7\xb5\xc1\x72\x7d\xf9\xf2\xd5\xff\xba\xce\x3d\xa1\x0c\xd6\xd8\x57\x2f\xfe\x17\x46\xf0\x49\xa3\x06\x7c\xd2\xfc\x46\xf9\x27\x00\x00\xff\xff\xd2\xfc\xb4\x2b\xb4\x0c\x00\x00")

func htmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_htmlIndexHtml,
		"html/index.html",
	)
}

func htmlIndexHtml() (*asset, error) {
	bytes, err := htmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/index.html", size: 3252, mode: os.FileMode(420), modTime: time.Unix(1493926619, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlJsLaunchcontrolJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\x31\x4f\xc3\x30\x10\x85\xf7\xfc\x8a\x27\x53\xa9\xb6\x8a\x1c\xb1\x52\x65\x60\x65\x80\xa1\x03\xb3\xeb\x5c\x93\x08\xd7\x57\x72\x4e\x22\x84\xfa\xdf\x51\xd2\xd0\x14\xc4\xe6\x7b\xbe\xf7\xe9\xbd\x5b\xe9\x92\x7d\x77\xa4\x98\x8c\x6d\xc9\x95\x9f\xfa\xd0\x45\x9f\x1a\x8e\xda\xe0\x2b\x03\xb0\xee\x84\x20\xa9\x6d\x7c\x5a\x6f\xb3\x51\x41\xef\x5a\x1c\x02\x49\x1d\x9a\xaa\x4e\x28\xb0\xd2\x50\x77\x8b\xa2\x60\xec\x32\x69\xb3\x9d\x5c\x9e\xa3\x70\x20\x1b\xb8\xd2\xea\xc9\x7f\x74\x4d\xdb\xc4\x0a\x03\xed\x85\xfd\x3b\x25\x35\xef\x8d\xf4\xe0\xba\xe8\xeb\xdd\xa4\xa3\x40\xa4\x01\x6f\xb4\xbf\xcc\x5a\x0d\xf2\x98\xe7\x0a\x1b\x04\xf6\x6e\xcc\x6a\x6b\x96\x84\x0d\x54\xde\x3f\xe4\xbf\x69\xb7\x24\xcb\xf1\x48\x22\xae\x22\x14\xb8\xf6\xa4\x7e\x6c\x7f\x29\x8b\xbf\x41\xa7\x4f\x5b\xba\xe4\x66\xde\x4f\x42\x37\x99\x51\xe0\x79\xf7\xfa\x62\x4f\xae\x15\xfa\x7f\x79\x39\xc4\xed\x4d\xd4\x91\x7b\x52\xf7\x33\xc6\x9e\x58\xae\x6f\x39\x95\xb3\xfd\x9c\x9d\xb5\x31\xdb\xec\x3b\x00\x00\xff\xff\xc2\x8f\xca\x44\xa5\x01\x00\x00")

func htmlJsLaunchcontrolJsBytes() ([]byte, error) {
	return bindataRead(
		_htmlJsLaunchcontrolJs,
		"html/js/launchcontrol.js",
	)
}

func htmlJsLaunchcontrolJs() (*asset, error) {
	bytes, err := htmlJsLaunchcontrolJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/js/launchcontrol.js", size: 421, mode: os.FileMode(420), modTime: time.Unix(1493927110, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _htmlJsUiLaunchJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\x6b\x6f\xe2\x48\xd6\xfe\xfc\xfa\x57\x9c\x41\xdd\x6a\x48\x3b\x86\xa4\xf5\x6a\x57\xd0\xf4\xc8\x01\x27\x58\x22\x36\x63\x9b\x64\xa2\xd1\x68\x54\xd8\x05\x54\xb7\xed\xb2\xaa\xca\xc9\xa2\x56\xfe\xfb\xaa\xca\x17\x8c\x21\x97\x19\x6d\x3e\x04\x5f\xce\xf5\x39\xcf\x39\x55\xae\xfe\x99\xa6\xcd\x51\x1e\x6e\x43\x9a\x0a\x46\x63\x58\xda\x70\x1d\x63\xbe\x8d\xc9\x66\x2b\xb4\xad\x10\x19\x1f\xf6\xfb\x1b\x22\xb6\xf9\xca\x08\x69\xd2\x5f\xe7\xe9\x77\x14\xfe\xe8\xc7\x28\x4f\x6b\x35\x4d\x9b\xd0\x6c\xc7\xa4\x0e\x5c\x0e\x2e\xfe\x05\xd7\x85\x94\xa6\x79\x38\x22\x5c\x30\xb2\xca\x05\xa1\x29\xa0\x34\x82\x9c\x63\x20\x29\x70\x9a\xb3\x10\xab\x27\x2b\x92\x22\xb6\x83\x35\x65\x09\xd7\xe1\x89\x88\x2d\x50\xa6\x7e\x69\x2e\xb4\x84\x46\x64\x4d\x42\x24\x0d\xe8\x80\x18\x86\x0c\xb3\x84\x08\x81\x23\xc8\x18\x7d\x24\x11\x8e\x40\x6c\x91\x00\xb1\xc5\xb0\xa6\x71\x4c\x9f\x48\xba\x81\x90\xa6\x11\x91\x4a\x5c\x29\x25\x58\x0c\xb5\x0b\x03\x0e\x23\xe2\x40\xd7\x55\x28\x21\x8d\x30\x24\x39\x17\xc0\xb0\x40\x24\x55\xf6\xd0\x8a\x3e\xca\x57\x55\x7a\x29\x15\x24\xc4\x3a\x88\x2d\xe1\x5a\x4c\xb8\x90\x06\x9a\xae\xd2\xa8\x15\x47\x44\x78\x18\x23\x92\x60\x66\x68\x97\xc7\xfe\x49\xda\xcc\xbf\xf2\x9f\x31\x1a\xe5\x21\x7e\x2d\x04\x4d\x86\x00\x7f\x33\x04\x28\xd3\x8a\x68\x98\x27\x38\x15\x0a\x55\x0d\xa5\x51\x9f\x32\xa0\x62\x8b\x19\x24\x48\x60\x46\x50\xcc\xf7\xe8\xaa\x92\x28\xb5\x46\xe8\x86\xf6\xc5\x00\x07\x13\xa5\x24\x5f\xa6\x28\xc1\x32\x14\x79\xbd\x8f\x76\x4b\xe3\x08\x33\x48\xe9\x5e\x48\x81\x4e\x04\x07\x45\x1f\x69\x8e\x32\xae\x25\x68\x07\x2b\x2c\xe9\x11\x81\xa0\x80\xd3\x88\x32\x8e\x25\x13\x32\x46\x13\x2a\x30\x14\xa0\x08\x0e\x11\x66\xe4\x11\x47\xb0\x66\x34\x51\x95\x00\x4e\xd7\xe2\x49\x96\xb9\x62\x0d\xcf\x70\x28\x69\x03\x19\x23\x92\x4c\x4c\x12\x26\x2d\xa8\xc3\xb9\x0a\x3f\x98\xd9\x3e\xf8\xee\x75\x70\x6f\x7a\x16\xd8\x3e\x2c\x3c\xf7\xce\x9e\x5a\x53\xb8\x7a\x80\x60\x66\xc1\xc4\x5d\x3c\x78\xf6\xcd\x2c\x80\x99\x3b\x9f\x5a\x9e\x0f\xa6\x33\x85\x89\xeb\x04\x9e\x7d\xb5\x0c\x5c\xcf\x87\x8e\xe9\x83\xed\x77\xe4\x0b\xcd\x74\x1e\xc0\xfa\x7d\xe1\x59\xbe\x0f\xae\x07\xf6\xed\x62\x6e\x5b\x53\xb8\x37\x3d\xcf\x74\x02\xdb\xf2\x75\xb0\x9d\xc9\x7c\x39\xb5\x9d\x1b\x1d\xae\x96\x01\x38\x6e\x00\x73\xfb\xd6\x0e\xac\x29\x04\xae\xae\x9c\x96\x6a\xda\x5e\x0d\xdc\x6b\xb8\xb5\xbc\xc9\xcc\x74\x02\xf3\xca\x9e\xdb\xc1\x83\x0a\xe4\xda\x0e\x1c\xe9\xeb\xda\xf5\xc0\x84\x85\xe9\x05\xf6\x64\x39\x37\x3d\x58\x2c\xbd\x85\xeb\x5b\x60\x7a\x96\x36\xb5\xfd\xc9\xdc\xb4\x6f\xad\xa9\x01\xb6\x03\x8e\x0b\xd6\x9d\xe5\x04\xe0\xcf\xcc\xf9\xfc\x64\x96\x32\xf6\x83\x1c\xaf\x2c\x98\xdb\xe6\xd5\xdc\xd2\x94\x27\xe7\x01\xa6\xb6\x67\x4d\x02\x99\xce\xfe\x6a\x62\x4f\x2d\x27\x30\xe7\x3a\xf8\x0b\x6b\x62\xcb\x0b\xeb\x77\xeb\x76\x31\x37\xbd\x07\xbd\xb4\xe9\x5b\xbf\x2d\x2d\x27\xb0\xcd\xb9\x36\x35\x6f\xcd\x1b\xcb\x87\xee\x1b\x90\x2c\x3c\x77\xb2\xf4\xac\x5b\x19\xb3\x7b\x0d\xfe\xf2\xca\x0f\xec\x60\x19\x58\x70\xe3\xba\x53\x09\xb4\xe6\x5b\xde\x9d\x3d\xb1\xfc\x11\xcc\x5d\x5f\xa1\xb5\xf4\x2d\x1d\xa6\x66\x60\x2a\xc7\x0b\xcf\xbd\xb6\x03\x7f\x24\xaf\xaf\x96\xbe\xad\x40\xb3\x9d\xc0\xf2\xbc\xe5\x22\xb0\x5d\xa7\x07\x33\xf7\xde\xba\xb3\x3c\x6d\x62\x2e\x7d\x6b\xaa\xd0\x75\x1d\x95\x6a\x30\xb3\x5c\xef\x41\x1a\x95\x18\x28\xf0\x75\xb8\x9f\x59\xc1\xcc\xf2\x24\xa0\x0a\x29\x53\x42\xe0\x07\x9e\x3d\x09\x1a\x62\x9a\xeb\x41\xe0\x7a\x41\x23\x47\x70\xac\x9b\xb9\x7d\x63\x39\x13\x4b\x46\xe3\x4a\x2b\xf7\xb6\x6f\xf5\xc0\xf4\x6c\x5f\x0a\xd8\x85\xdb\x7b\xf3\x01\xdc\xa5\x4a\x59\xd6\x68\xe9\x5b\x9a\xba\x6c\x30\x56\x57\x95\x04\xfb\x1a\xcc\xe9\x9d\x2d\xc3\x2e\x85\x17\xae\xef\xdb\x25\x4f\x14\x64\x93\x19\x14\x70\x1b\x9a\x76\xd6\xd7\xb4\x51\x77\x9d\xa7\xa1\xec\xe1\xee\x07\x5d\x8e\x02\x39\x74\xd3\x1e\xfc\xd4\x00\x00\x3a\x72\x40\xcb\x36\x0f\x45\x67\xa4\xa9\x47\xfd\x33\xf5\x03\x67\xb0\xae\x17\x07\x78\x22\xd1\x06\x8b\xf2\x45\xf5\xde\x27\x49\x1e\x23\x81\xb9\x6a\xf6\x84\x3e\x62\x39\x65\x54\xc3\xa3\xc6\xca\x02\x09\xcd\x53\x39\xc0\x49\x0a\x08\xe6\x6a\x2d\x31\x5a\xa6\xee\x49\x1c\x43\xc8\x30\x12\x18\x56\x31\x0d\x7f\x70\xc0\x71\x69\x4e\xa9\x6d\xc8\x23\x4e\xab\x67\x3a\x70\x5a\x0c\xcf\x6a\x86\xc8\xe5\xa6\xb2\xa5\xf4\x2b\x51\x88\xc9\x0f\x0c\x5f\x23\xf2\xf8\xad\xe5\xb3\xaf\x7e\x3f\x18\x45\x6a\x5d\xe8\x1c\xac\x72\xc6\x3e\xf9\x8e\x5e\x82\x25\xff\x68\xa6\xe6\xee\xb0\xf1\x48\xfe\xb1\x3c\xc6\x6c\x08\x82\xe5\x58\x3f\x7c\x81\xd2\x0d\x1e\xc2\xc0\xb8\xbc\xd4\xa1\xdf\x97\x48\x31\x0c\x84\xc3\xe5\xe5\x47\x09\x54\x85\x5a\x63\xec\xe2\x35\xca\x63\x01\x24\x41\x1b\xcc\x8d\x63\x37\x76\xb2\x19\x42\x87\x24\x9b\xbe\xba\x35\xb2\x74\xd3\x39\x74\xba\x8f\x7d\x2f\xbb\x7f\xd6\x52\x78\xd6\xb5\xfa\xfa\xaf\xa2\x04\x43\xa8\x39\xd3\x6b\x25\xfa\x88\x18\x84\x53\xf2\x08\x63\xc9\x25\xa3\x90\xb7\x0a\xac\xbb\x9d\x88\x3c\x76\x7a\xa3\x03\x05\x29\x6c\x84\x31\xe2\xdc\x91\x4b\xc6\x18\x3a\xe1\x79\x03\xdb\x91\x76\x64\x5e\x65\x75\xda\x3e\x49\x36\x6d\xfb\x05\x06\x07\x0e\xe8\xb9\x7a\xd8\x39\x25\xc8\x59\x08\x63\xb5\x8c\x18\x65\x29\x8d\x0a\xd4\x91\xf6\x7f\x52\x4e\xbd\xab\x62\xf8\xd0\x55\x57\xbd\xe3\x28\x1b\xcd\xf1\xde\x50\x1b\x25\x68\xc5\x7b\x00\xc8\x0b\x2a\x27\x22\x3f\xa8\x73\x33\xfc\x83\xe0\x3e\x74\xf7\xb7\xad\x44\x54\x71\x50\x96\xe1\x34\x9a\x6c\x49\x1c\x95\xd9\x9e\xa8\x60\x53\xa8\x61\xee\x50\x52\xf9\x2e\x1b\xaf\xd4\xe8\x4a\xed\x5e\xab\xca\x64\x0d\xdd\x5f\x8e\x6b\xd0\xe6\xda\x61\x35\x8c\x35\x8a\xb0\x9b\x8b\xee\xa0\xe5\xf5\xf9\x24\x95\xfb\x7d\xd5\x5b\x72\x77\x21\x68\x3d\x40\x32\xca\x49\xb1\x39\x15\xf5\x33\x9e\x61\x1c\x19\x0d\xc5\xa6\x8d\x4a\x61\x08\x59\x8c\x42\x65\xae\x32\x4b\xd4\x0e\x23\x94\xcd\xdb\x1d\x9c\x5f\x0c\x06\xbd\xa6\x91\xc2\xec\xb0\xf8\xa9\xd5\x90\x38\x50\xbb\x6c\xeb\x49\xa1\x46\xf7\x55\xde\xf5\xc2\x4c\x1b\xa0\x3a\x9b\xf1\xfe\xf2\x2b\x0c\xe0\x57\x18\xc0\xb0\x7e\x34\x7a\x53\xe7\x1b\x5c\x0c\xa4\x96\xfc\xff\x92\x5e\x91\xc7\xb8\xfc\xfd\x0a\x97\x52\xe1\x52\xca\xab\x27\xaf\x09\x1f\x9a\x2f\xc5\x8f\x1a\x2a\x3b\xea\x4b\x39\x3a\xe1\xec\x85\x78\xa4\x4a\x94\x33\x54\xe6\xa2\x34\x25\x7a\xd3\xf2\xd9\x11\x76\x27\xa8\xda\xec\x2e\x41\xb3\xae\x1c\xdf\x6f\xc8\xa1\x94\xc8\x3d\x73\xf7\xe7\x8a\x0a\x41\x93\x21\xfc\x91\x7d\xee\x7c\xec\xe8\xd0\x89\x49\x8a\x11\xeb\xfc\xf9\xac\xd7\x71\x35\x6c\xb5\xa8\x59\x05\xc7\xe5\xe7\x47\xce\xd2\x62\x09\x0d\x73\xc6\x24\x2f\xea\xc2\xbc\x46\xb1\x3d\x33\x5f\x1d\xd6\x45\x9c\x8b\xff\xc8\x7a\x23\xc6\xf1\x75\x4c\x91\xe8\xb6\xd3\x0a\x39\xef\x76\x0a\xd1\x4e\xaf\x77\x8c\x74\xb1\x48\xce\xb0\x14\x3e\x69\xab\xea\x7a\x65\x68\xab\xe4\x4e\x1a\x2a\xd3\xb9\x43\x71\x2e\x67\x5f\x1d\x5d\xbf\xed\xe2\x4c\xd2\xa5\x35\xc1\x15\x54\x70\x8b\xc4\xd6\x60\x34\x4f\xa3\xee\x81\xb5\xfe\x09\xfa\xbc\x5c\x81\x26\x57\x0e\x8a\x20\x48\xa2\xbe\x59\x13\x12\xc7\x84\x63\xf9\xad\xc5\x81\xc8\x05\x3a\x8e\x41\xa0\x1f\xf5\x0c\x68\x5a\x13\xf4\x60\xb4\xbc\x77\xa4\xbc\xa7\xce\xfb\x51\x52\x37\xd6\x9b\x23\xa4\x4a\xec\xfd\xa3\x44\xb5\x13\xe1\x02\xa5\xa1\xac\x8b\xc2\x18\xad\x78\xad\x76\xae\xb0\xad\xee\xba\xed\xd2\x96\xa5\x51\x42\x7f\x85\x28\x0e\xeb\x36\xac\x8c\x1e\xb7\x61\xab\x20\x07\x6a\x75\x45\xea\x16\x57\x9b\x4a\x35\x43\xdb\xb5\x59\x53\x56\xcd\xf2\xa6\xbd\xca\x71\xff\xd5\x62\x54\x52\x43\x40\x6a\x9b\x5a\x4f\xea\xff\xf9\x68\x3f\xc8\xaf\x51\x98\x36\x40\xad\xc2\xf4\xfb\x10\xb8\x53\x17\xd6\x64\x93\x33\x0c\x34\x2f\x8e\x3e\x18\x46\xb1\xa4\x2a\x49\x37\xc5\x21\xc0\x0a\x73\x01\x4f\x68\x27\xe3\x91\x9e\xd4\xce\x5c\x8a\x26\x46\xcb\x5e\xdb\xbc\x47\xf3\xcd\x16\x12\x8c\x78\xce\xca\x2d\xf7\xa7\x35\x8e\xc5\xa7\x62\xef\x8c\x20\xa6\x9b\x8b\x81\x61\x18\x30\xec\x29\x57\x59\x2e\x04\x49\x37\xb2\x41\x3f\x02\x12\x6d\x7b\x5f\x06\x83\x84\x97\x6b\x2b\x82\x75\x1e\xc7\xf2\x0b\x83\xfe\xc0\xaa\x52\x29\x7d\x1a\x1e\x33\x0f\xc7\x68\xb7\xc0\x6c\x51\xa2\x37\x86\xae\x62\xa0\xf2\xdc\xbd\x18\x0c\xfa\x25\x36\x67\xf0\x6f\xe3\xff\xe1\x33\x7c\x39\xcd\xbf\x9a\xc1\x67\x6d\x93\x2f\xd2\xae\x0c\x4d\x6e\xfb\x49\x9a\xcb\x6f\x99\xb2\x9e\x2b\x2c\x9e\x30\x4e\x41\x3c\xc9\xde\x26\x12\x16\xb5\x69\xe0\xf8\x8d\xfe\xe6\x02\x31\x31\x2c\x7e\xf6\x2d\x5e\x9e\x95\x94\xee\xde\x6a\x78\x41\x33\x18\x02\x96\x60\xff\x33\x03\xff\x84\xa1\x85\xe9\x06\x35\x55\x0a\xba\x8a\xe6\x05\x76\x3e\x91\xd4\x08\x63\x8c\x58\x40\x12\x4c\xf3\x72\x31\x10\xc5\xcd\x89\xf1\xbf\x8e\xcb\xb5\xba\xbd\xcd\x55\x6b\x77\xed\xf0\xc4\x82\xbd\x8e\x2b\xb3\x30\x56\x6e\x39\x16\x95\xd3\x17\x17\xc0\x43\xdb\xfb\x2c\x46\x47\x52\x7f\xc7\x62\x69\xb5\x80\xeb\x14\x48\xc7\xe6\x9f\xf5\x2a\x8e\x7a\x30\x36\x15\xda\x3b\xda\x53\xd2\x0d\x64\x5e\xd9\x57\xc4\x68\x07\x2c\x4f\x79\xfd\xa5\x5d\x1d\xf6\x72\xb1\x8b\x31\xf0\x90\x91\x4c\x14\xdc\x94\x2d\xdc\xd8\x06\x57\x44\x7b\x91\xd6\x4a\x75\x08\x88\x31\xb4\x53\xe3\x38\x2c\x0f\x55\x57\xdf\x71\x28\xf8\xb0\x29\x0c\xe5\x5b\x03\x09\x90\x15\xaf\xd6\x54\x6e\x9c\x94\xca\x28\x6f\xee\x47\xdf\x20\x77\xad\xc6\xb3\xfd\x26\xf3\x55\x66\xf7\xfb\x40\x86\x90\xe6\xc9\x6a\x7f\x2a\x5a\xe4\x21\x68\xd9\xa8\x48\x34\xb6\x56\x31\xda\x35\xdb\x40\x65\xae\x03\x69\x93\x81\xc8\xd4\x76\x19\xa6\x6b\x20\xf0\xcb\x78\x0c\x9f\xf2\x34\xc2\x6b\x92\xe2\xe8\x13\xfc\x0a\x04\x86\x30\x78\x77\x0f\xc8\x8f\x22\x02\xdf\xc6\x25\xd0\x46\x8c\xd3\x8d\xd8\xf6\xe0\x67\x39\xdc\x46\x8d\x0f\x1d\x68\xce\x4d\x18\xcb\x40\xc6\x63\xb5\xf1\x2f\x94\xff\x20\x7f\x4a\xe4\x87\x07\xb7\xe7\xd5\xcd\xf9\x85\xbc\x1d\x1d\x35\xf2\x49\xfe\xbf\xd2\x50\xb5\xed\x8c\x72\xbd\xe1\x8a\x67\xa7\x5a\x60\x1d\x1b\x12\xd7\x3d\x9a\x9f\x2f\x8e\x69\xaf\x12\x7a\x99\xde\x6a\x2e\x6e\x51\x2c\x67\x71\xba\x53\x34\x78\xac\x49\x5d\xcd\xf2\xe6\x40\xa3\xd9\x2b\xdb\xe3\xf7\x0e\xaf\x56\x10\x82\x6e\x36\x31\xf6\xd4\x09\x41\x44\xb8\x4c\x8a\x03\x65\xb0\x25\x51\x79\x14\x56\x9c\x1e\xa8\x03\x9c\x7d\x30\x0d\xb5\x57\x62\x6a\x7d\xef\x06\x4a\xa9\x7b\x22\x98\xe7\xde\x48\x7b\xee\x75\xbf\xff\x96\x63\xb6\xd3\xeb\x33\x7e\x75\xba\x17\xd1\xa7\xde\x48\xfb\x6f\x00\x00\x00\xff\xff\xcf\xb3\x01\x55\xf0\x19\x00\x00")

func htmlJsUiLaunchJsBytes() ([]byte, error) {
	return bindataRead(
		_htmlJsUiLaunchJs,
		"html/js/ui/launch.js",
	)
}

func htmlJsUiLaunchJs() (*asset, error) {
	bytes, err := htmlJsUiLaunchJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "html/js/ui/launch.js", size: 6640, mode: os.FileMode(420), modTime: time.Unix(1493895379, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"html/css/launchcontrol.css": htmlCssLaunchcontrolCss,
	"html/css/ui/launch.css": htmlCssUiLaunchCss,
	"html/img/fleshlight.png": htmlImgFleshlightPng,
	"html/img/ruler.png": htmlImgRulerPng,
	"html/index.html": htmlIndexHtml,
	"html/js/launchcontrol.js": htmlJsLaunchcontrolJs,
	"html/js/ui/launch.js": htmlJsUiLaunchJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"html": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"launchcontrol.css": &bintree{htmlCssLaunchcontrolCss, map[string]*bintree{}},
			"ui": &bintree{nil, map[string]*bintree{
				"launch.css": &bintree{htmlCssUiLaunchCss, map[string]*bintree{}},
			}},
		}},
		"img": &bintree{nil, map[string]*bintree{
			"fleshlight.png": &bintree{htmlImgFleshlightPng, map[string]*bintree{}},
			"ruler.png": &bintree{htmlImgRulerPng, map[string]*bintree{}},
		}},
		"index.html": &bintree{htmlIndexHtml, map[string]*bintree{}},
		"js": &bintree{nil, map[string]*bintree{
			"launchcontrol.js": &bintree{htmlJsLaunchcontrolJs, map[string]*bintree{}},
			"ui": &bintree{nil, map[string]*bintree{
				"launch.js": &bintree{htmlJsUiLaunchJs, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
